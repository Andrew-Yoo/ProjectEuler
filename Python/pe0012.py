# Project Euler
# Highly Divisible Triangular Number
# Problem 12
# https://projecteuler.net/problem=12
#
# """
# The sequence of triangle numbers is generated by adding the natural numbers. So the 7^th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
# Let us list the factors of the first seven triangle numbers:
# 1: 1
# 3: 1,3
# 6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.
# What is the value of the first triangle number to have over five hundred divisors?
# """

import math

def generate_triangular_numbers(number):
    triangular_numbers = []
    for x in range(1, number + 1):
        triangular_numbers.append(int((x * (x + 1)) / 2))
    return triangular_numbers

triangular_numbers = generate_triangular_numbers(12500) # Increase for larger min_divisor's

def check_divisor(min_divisor, triangular_numbers):
    for item in triangular_numbers:
        factors = 0
        for y in range(1, int(math.sqrt(item))):
            if item % y == 0:
                factors += 2 if y != item // y else 1  # Bug fixed â€” needed to double count some divisors
        if factors > min_divisor:
            return item
            break

print(check_divisor(500, triangular_numbers))
